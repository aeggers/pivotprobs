% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/event_probabilities_from_event_list.R
\name{election_event_probs}
\alias{election_event_probs}
\title{Compute probability of election events}
\usage{
election_event_probs(
  election,
  method = "sc",
  alpha = NULL,
  mu = NULL,
  precision = NULL,
  sigma = NULL,
  sims = NULL,
  num_sims = 1e+05,
  sim_window = 0.01,
  cand_names = NULL,
  drop_dimension = F,
  merge_adjacent_pivot_events = F,
  skip_non_pivot_events = F,
  skip_compound_pivot_events = F,
  store_time = T,
  maxEvals = 1e+05,
  tol = 0.01,
  ev_increments = 50,
  en_increments_1st_round = 30,
  en_increments_2nd_round = 100,
  ...
)
}
\arguments{
\item{election}{A list with elements \code{n} (electorate size), \code{ordinal}
(logical flag indicating whether it is an ordinal system or not), and \code{events}, a list of election events each with elements \code{win_conditions}, \code{tie_condition_rows}, and \code{P}. See ?event_list_functions.}

\item{alpha}{Optional vector of parameters for Dirichlet distribution (one for
each ballot type). In a plurality election with k candidates, should be of
length k; in an ordinal system with 3 candidates, should be length 6.}

\item{mu}{Optional vector of location parameters for Dirichlet distribution
or logistic normal distribution.}

\item{precision}{Optional scalar precision parameter for Dirichlet distribution.}

\item{sigma}{Optional covariance matrix for logistic normal distribution.}

\item{sims}{Optional matrix of simulated elections, one column per ballot type.}

\item{num_sims}{Optional number of simulated elections, if not
provided in \code{sims}.}

\item{sim_window}{Vote share discrepancy within which two candidates will be
"nearly tied" for method "mc". Larger \code{sim_window} means more bias,
smaller means more variance. Set to .01 by default.}

\item{cand_names}{Optional vector of candidate names. If not supplied, will
be "a", "b", "c", etc.}

\item{drop_dimension}{Method "sc" can be sped up for pivot events by
integrating the belief function on facets where one candidate is exactly
1/2n behind the other (or they are exactly tied, if \code{drop_dimension=T})
rather than in the hypervolume where two candidates are nearly tied.}

\item{merge_adjacent_pivot_events}{If \code{F}, method "sc" computes the probability of e.g. candidate \code{a} being just behind \code{b} and vice
versa; if \code{T}, method "sc" saves time by computing the probability of candidates \code{a} and \code{b} being approximately or exactly tied (depending on \code{drop_dimension}).}

\item{skip_non_pivot_events}{Set to \code{T} to avoid computing the probability
of events where one vote cannot make a difference, e.g. where candidate \code{a}
wins by more than one vote. Relevant for methods "sc" and "mc".}

\item{skip_compound_pivot_events}{Set to \code{T} to avoid computing the probability of (near) three-way ties in plurality.}

\item{store_time}{By default we store the time each computation takes, in seconds.}

\item{maxEvals}{The maximum number of function evaluations to compute an
integral via method "sc" (passed to
\code{SimplicialCubature::adaptIntegrateSimplex()}). If this is exceeded, you still get a result, but it will not be as precise as requested.}

\item{tol}{The relative error requested in computing an
integral via method "sc" (passed to
\code{SimplicialCubature::adaptIntegrateSimplex()}). For faster imprecise computation (e.g. for testing), set to e.g. .2.}

\item{ev_increments}{Increments for numerical integration in method "ev".}

\item{en_increments_1st_round}{Increments for numerical integration of
first-round pivot events in method "en".}

\item{en_increments_2nd_round}{Increments for numerical integration of
second-round pivot events in method "en".}
}
\value{
A list containing one list per election event. Each of these lower-level
lists contains
\itemize{
\item \code{integral} the event probability
\item \code{P} the election probability matrix, indicating which candidate (rows)
is elected at this event depending on which extra ballot (columns) is submitted.
\item \code{seconds_elapsed} the time to compute this event probability.
}
For method "sc" these event-specific lists include other output from \code{SimplicialCubature::adaptIntegrateSimplex()}, such as \code{functionEvaluations} and \code{message}.
}
\description{
\code{election_event_probs()} takes an \code{election} argument
(created by e.g. \code{plurality_election()} or \code{irv_election()}) and
returns a list containing, for each election event (i.e. each class of
election outcomes),
\itemize{
\item a scalar \code{integral} indicating the probability of the event,
\item a matrix \code{P}  indicating which candidate elected (rows) as a
function of which extra ballot is submitted at this event (columns), and
\item other objects depending on the method used to compute the event probabilities.}
}
\details{
There are four methods for computing the probability of a given election event:
\itemize{
\item "sc" (or "SC" or "SimplicialCubature") partitions the election event
into disjoint simplices and uses the SimplicialCubature to integrate the
belief function over these simplices using the adaptive algorithm of
Genz and Cools. Slow, but can be sped up  by skipping non_pivot_events
(\code{skip_non_pivot_events=T}), dropping a dimension
(\code{drop_dimension=T}), merging adjacent pivot events
(\code{merge_adjacent_pivot_events=T}), and/or (when relevant) skipping compound
pivot events (\code{skip_compound_pivot_events=T}). Currently implemented only for
Dirichlet and Logistic Normal beliefs, but with some adjustment to the syntax
could be extended to handle other distributions (get in touch!).
\item "mc" (or "MC" or "Monte Carlo") counts the proportion of simulated elections
(supplied by the user or generated from user-supplied parameters) that satisfy
election event conditions. Also slow (especially with large \code{num_sums}),
but like "sc" can be sped up. Can generate simulations from Dirichlet or Logistic Normal belief distributions, or can be applied to any matrix of simulated elections
supplied by the user.
\item "ev" (or "EV" or "Eggers-Vivyan") uses numerical integration of the
Dirichlet distribution to estimate pivot event probabilities in plurality
elections, making an independence assumption when there are
more than four candidates. Fast but overstates the probability of low-probability
events and limited to Dirichlet beliefs.
\item "en" (or "EN" or "Eggers-Nowacki") uses numerical integration of the
Dirichlet distribution to estimate pivot event probabilities in three-candidate
IRV elections up to an arbitrary degree of precision. Fast but limited to Dirichlet beliefs.
}
}
\examples{
alpha3 <- c(.4, .35, .25)*85
sc_out <- plurality_election(k = 3) \%>\%
  election_event_probs(method = "sc", alpha = alpha3, tol = .1)
sc_out[["a_b"]]$integral
sc_out[["a_b"]]$seconds_elapsed

mc_out <- plurality_election(k = 3) \%>\%
  election_event_probs(method = "mc", alpha = alpha3, num_sims = 500000)
mc_out[["a_b"]]$integral
mc_out[["a_b"]]$seconds_elapsed

mc_out <- plurality_election(k = 3) \%>\%
  election_event_probs(method = "ev", alpha = alpha3)
mc_out[["a_b"]]$integral
mc_out[["a_b"]]$seconds_elapsed
}
